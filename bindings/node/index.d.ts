/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface VectorDbConfig {
  /** S5 portal URL (e.g., "http://localhost:5524") */
  s5Portal: string;
  /** User's blockchain-derived seed phrase */
  userSeedPhrase: string;
  /** Unique session identifier */
  sessionId: string;
  /** Optional: Memory budget in MB (default: 512) */
  memoryBudgetMb?: number;
  /** Optional: Enable debug logging (default: false) */
  debug?: boolean;
  /** Optional: Encrypt vectors at rest in S5 storage (default: true) */
  encryptAtRest?: boolean;
  /** Optional: Vectors per chunk for storage (default: 10000) */
  chunkSize?: number;
  /** Optional: Cache size in MB for chunk loading (default: 150) */
  cacheSizeMb?: number;
}
export interface LoadOptions {
  /** Load HNSW immediately, IVF on-demand (default: true) */
  lazyLoad?: boolean;
  /** Override session memory budget */
  memoryBudgetMb?: number;
}
export interface SearchOptions {
  /** Minimum similarity score (0-1, default: 0.7) */
  threshold?: number;
  /** Include vectors in results (default: false) */
  includeVectors?: boolean;
}
export interface VectorInput {
  /** Unique identifier */
  id: string;
  /** Dense embedding vector */
  vector: Array<number>;
  /** Associated metadata (any valid JSON value) */
  metadata: any;
}
export interface SearchResult {
  /** Vector ID */
  id: string;
  /** Similarity score (0-1) */
  score: number;
  /** Associated metadata (any valid JSON value) */
  metadata: any;
  /** Original vector (if requested) */
  vector?: Array<number>;
}
export interface SessionStats {
  /** Total vectors in index */
  vectorCount: number;
  /** Current memory usage in MB */
  memoryUsageMb: number;
  /** Active index type */
  indexType: string;
  /** Vectors in HNSW index */
  hnswVectorCount?: number;
  /** Vectors in IVF index */
  ivfVectorCount?: number;
}
export interface DeleteResult {
  /** Number of vectors successfully deleted */
  deletedCount: number;
  /** IDs of deleted vectors */
  deletedIds: Array<string>;
}
export declare function getVersion(): string;
export declare function getPlatformInfo(): PlatformInfo;
export interface PlatformInfo {
  platform: string;
  arch: string;
}
export type VectorDBError = VectorDbError;
export declare class VectorDbError {
  message: string;
  code: string;
}
export type VectorDBSession = VectorDbSession;
export declare class VectorDbSession {
  /** Create a new vector DB session */
  static create(config: VectorDBConfig): Promise<VectorDbSession>;
  /** Load user's vectors from S5 using chunked storage format */
  loadUserVectors(
    cid: string,
    options?: LoadOptions | undefined | null,
  ): Promise<void>;
  /** Search for similar vectors */
  search(
    queryVector: Array<number>,
    k: number,
    options?: SearchOptions | undefined | null,
  ): Promise<Array<SearchResult>>;
  /** Add vectors to the index */
  addVectors(vectors: Array<VectorInput>): Promise<void>;
  /**
   * Delete a vector from the index by ID
   *
   * Performs soft deletion - vector is marked as deleted but not physically removed
   * until vacuum() is called or the index is saved and reloaded.
   *
   * # Arguments
   * * `id` - The ID of the vector to delete
   *
   * # Errors
   * Returns error if:
   * - Vector with given ID does not exist
   * - Session has been destroyed
   */
  deleteVector(id: string): Promise<void>;
  /**
   * Delete vectors by metadata filter
   *
   * Scans all vectors and deletes those whose metadata matches the filter.
   * Supports:
   * - Simple field matching: { "userId": "user123" }
   * - Multiple fields (AND logic): { "userId": "user123", "status": "active" }
   * - Nested field access with dot notation: { "user.id": "123" }
   * - Array field matching: { "tags": "ai" } (checks if value is in array)
   *
   * # Arguments
   * * `filter` - JSON object with fields to match
   *
   * # Returns
   * DeleteResult containing count of deleted vectors and their IDs
   *
   * # Errors
   * Returns error if session has been destroyed
   */
  deleteByMetadata(filter: any): Promise<DeleteResult>;
  /**
   * Update metadata for an existing vector
   *
   * Replaces the entire metadata object for a vector (does not merge).
   * The internal _originalId field is preserved automatically.
   *
   * # Arguments
   * * `id` - The original user-provided ID of the vector
   * * `metadata` - New metadata object (replaces existing metadata)
   *
   * # Returns
   * Ok(()) on success
   *
   * # Errors
   * Returns error if:
   * - Vector with given ID does not exist
   * - Session has been destroyed
   *
   * # Example
   * ```javascript
   * await session.updateMetadata('doc1', {
   *   title: 'Updated Title',
   *   timestamp: Date.now(),
   *   tags: ['ai', 'ml']
   * });
   * ```
   */
  updateMetadata(id: string, metadata: any): Promise<void>;
  /** Save index to S5 using chunked storage format */
  saveToS5(): Promise<string>;
  /** Get session statistics */
  getStats(): Promise<SessionStats>;
  /** Destroy session and clear memory */
  destroy(): Promise<void>;
}
