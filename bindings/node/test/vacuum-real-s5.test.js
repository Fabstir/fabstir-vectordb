/**
 * Vacuum API Real S5 Integration Tests
 *
 * Tests vacuum operations with actual Enhanced S5.js persistence.
 *
 * Prerequisites:
 * 1. Start local S5 server: cd test-s5-server && npm start
 * 2. Verify health: curl http://localhost:5522/health
 * 3. Run tests: npm test test/vacuum-real-s5.test.js
 *
 * Expected Performance:
 * - Vacuum (cleanup): <100ms for 1000 deletions
 * - Save to S5: ~10-15 seconds for 100K vectors (12 files × ~800ms)
 * - Load from S5: ~8-10 seconds for 100K vectors
 */

const { describe, it, before, after } = require('node:test');
const assert = require('node:assert');
const { VectorDbSession } = require('../index.js');

// Use valid BIP39 seed phrase (must match what S5.js accepts)
// This seed phrase was generated by s5.generateSeedPhrase()
const REAL_S5_SEED = 'fault twenty against sodium wear outside tuck lecture report style nothing toward appear also love';

describe('Vacuum API - Real S5 Integration Tests', () => {
  let session;
  const testVectors = [];

  // Generate test vectors (384 dimensions for all-MiniLM-L6-v2)
  // Using smaller dataset (50 vectors) for faster real S5 testing
  for (let i = 0; i < 50; i++) {
    const vector = Array(384).fill(0).map(() => Math.random());
    testVectors.push({
      id: `vec-${i}`,
      vector,
      metadata: {
        index: i,
        category: i % 3 === 0 ? 'A' : i % 3 === 1 ? 'B' : 'C',
        active: i % 2 === 0,
      },
    });
  }

  before(async () => {
    console.log('# Creating session with REAL S5 storage...');
    console.log('# NOTE: Requires local S5 server on port 5522 (cd test-s5-server && npm start)');

    try {
      session = await VectorDbSession.create({
        s5Portal: 'http://localhost:5522',
        userSeedPhrase: REAL_S5_SEED,
        sessionId: `vacuum-real-s5-${Date.now()}`,
        storageMode: 'real', // ← Real S5 mode (not mock)
      });
      console.log('# ✓ Session created with real S5 storage');
    } catch (error) {
      console.error('# ✗ Failed to create session. Is S5 server running?');
      console.error(`#   Start server: cd test-s5-server && npm start`);
      console.error(`#   Check health: curl http://localhost:5522/health`);
      throw error;
    }
  });

  after(async () => {
    if (session) {
      await session.destroy();
      console.log('# ✓ Session destroyed');
    }
  });

  it('should add test vectors', async () => {
    await session.addVectors(testVectors);
    console.log(`  ✓ Added ${testVectors.length} vectors`);
  });

  it('should show zero deletions initially', async () => {
    const stats = await session.getStats();
    assert.strictEqual(stats.totalDeletedCount, 0, 'Should have 0 deleted vectors');
    assert.strictEqual(stats.vectorCount, 50, 'Should have 50 active vectors');
    console.log('  ✓ Initial stats: 0 deleted, 50 active');
  });

  it('should delete vectors and track deletion count', async () => {
    // Delete 10 specific vectors
    for (let i = 0; i < 10; i++) {
      await session.deleteVector(`vec-${i}`);
    }
    console.log('  ✓ Deleted 10 vectors');

    // Check stats show deletions
    const stats = await session.getStats();
    assert.strictEqual(stats.totalDeletedCount, 10, 'Should have 10 deleted vectors');
    assert.strictEqual(stats.vectorCount, 40, 'Should have 40 active vectors');
    console.log('  ✓ Stats show 10 deleted, 40 active');
  });

  it('should vacuum and remove deleted vectors', async () => {
    console.log('  ⏱  Starting vacuum operation...');
    const startVacuum = Date.now();

    const vacuumStats = await session.vacuum();

    const vacuumTime = Date.now() - startVacuum;
    console.log(`  ✓ Vacuum completed in ${vacuumTime}ms`);

    assert.strictEqual(vacuumStats.totalRemoved, 10, 'Should remove 10 vectors');
    assert.ok(vacuumStats.totalRemoved > 0, 'Should remove at least some vectors');
    console.log(`  ✓ Vacuum removed ${vacuumStats.totalRemoved} vectors`);
    console.log(`    - HNSW: ${vacuumStats.hnswRemoved}`);
    console.log(`    - IVF: ${vacuumStats.ivfRemoved}`);

    // Verify vacuum was fast (<100ms for 10 deletions)
    assert.ok(vacuumTime < 1000, `Vacuum should be <1s, got ${vacuumTime}ms`);
  });

  it('should show zero deletions after vacuum', async () => {
    const stats = await session.getStats();
    assert.strictEqual(stats.totalDeletedCount, 0, 'Should have 0 deleted after vacuum');
    assert.strictEqual(stats.vectorCount, 40, 'Should still have 40 active vectors');
    console.log('  ✓ After vacuum: 0 deleted, 40 active');
  });

  it('should persist vacuumed state to REAL S5 storage', async () => {
    console.log('  ⏱  Saving to REAL S5 (this may take 10-15 seconds)...');
    const startSave = Date.now();

    const cid = await session.saveToS5();

    const saveTime = Date.now() - startSave;
    console.log(`  ✓ Saved to S5 in ${saveTime}ms (${(saveTime / 1000).toFixed(1)}s)`);
    console.log(`  ✓ CID: ${cid}`);

    // Expected: ~10-15 seconds for 50 vectors (1 chunk + manifest + schema = 3 files)
    // Real S5 benchmarks: ~800ms per file × 3 = ~2.4 seconds
    console.log(`  ℹ  Expected time: ~2-5 seconds for 50 vectors (3 files)`);

    // Verify stats match (no deletions persisted)
    const stats = await session.getStats();
    assert.strictEqual(stats.totalDeletedCount, 0);
    assert.strictEqual(stats.vectorCount, 40);
  });

  it('should reload from REAL S5 without deleted vectors', async () => {
    // Get pre-save stats
    const statsBefore = await session.getStats();
    const vectorCountBefore = statsBefore.vectorCount;

    // Save to S5
    console.log('  ⏱  Saving to S5...');
    const startSave = Date.now();
    const cid = await session.saveToS5();
    const saveTime = Date.now() - startSave;
    console.log(`  ✓ Saved in ${saveTime}ms (CID: ${cid})`);

    // Destroy and recreate session
    await session.destroy();
    console.log('  ✓ Session destroyed');

    session = await VectorDbSession.create({
      s5Portal: 'http://localhost:5522',
      userSeedPhrase: REAL_S5_SEED,
      sessionId: `vacuum-reload-${Date.now()}`,
      storageMode: 'real',
    });
    console.log('  ✓ New session created');

    // Load from S5
    console.log('  ⏱  Loading from REAL S5 (this may take 8-10 seconds)...');
    const startLoad = Date.now();

    await session.loadUserVectors(cid);

    const loadTime = Date.now() - startLoad;
    console.log(`  ✓ Loaded from S5 in ${loadTime}ms (${(loadTime / 1000).toFixed(1)}s)`);

    // Verify stats match
    const statsAfter = await session.getStats();
    assert.strictEqual(statsAfter.vectorCount, vectorCountBefore,
      'Vector count should match after reload');
    assert.strictEqual(statsAfter.totalDeletedCount, 0,
      'Should have 0 deleted vectors after reload (vacuumed state persisted)');

    console.log('  ✓ Vacuumed state persisted correctly through REAL S5');
    console.log(`  ✓ Confirmed: ${statsAfter.vectorCount} active, 0 deleted`);
  });

  it('should handle delete by metadata with real S5 persistence', async () => {
    // Delete all category 'B' vectors
    const deleteResult = await session.deleteByMetadata({ category: 'B' });
    console.log(`  ✓ Deleted ${deleteResult.deletedCount} vectors by metadata (category: B)`);

    // Vacuum
    const vacuumStats = await session.vacuum();
    assert.strictEqual(vacuumStats.totalRemoved, deleteResult.deletedCount,
      'Vacuum should remove same count as deleted');
    console.log(`  ✓ Vacuum removed ${vacuumStats.totalRemoved} vectors`);

    // Save to S5
    console.log('  ⏱  Saving to S5 after metadata deletion...');
    const startSave = Date.now();
    const cid = await session.saveToS5();
    const saveTime = Date.now() - startSave;
    console.log(`  ✓ Saved in ${saveTime}ms (CID: ${cid})`);

    // Verify stats
    const stats = await session.getStats();
    assert.strictEqual(stats.totalDeletedCount, 0);
    console.log('  ✓ Metadata deletion + vacuum + S5 save confirmed');
  });

  it('should measure real S5 performance metrics', async () => {
    console.log('  📊 Real S5 Performance Metrics:');

    // Add more vectors for performance test
    const perfVectors = [];
    for (let i = 100; i < 200; i++) {
      perfVectors.push({
        id: `perf-${i}`,
        vector: Array(384).fill(0).map(() => Math.random()),
        metadata: { index: i, perf: true },
      });
    }

    const addStart = Date.now();
    await session.addVectors(perfVectors);
    const addTime = Date.now() - addStart;
    console.log(`  - Add 100 vectors: ${addTime}ms`);

    // Delete half
    const deleteStart = Date.now();
    for (let i = 100; i < 150; i++) {
      await session.deleteVector(`perf-${i}`);
    }
    const deleteTime = Date.now() - deleteStart;
    console.log(`  - Delete 50 vectors: ${deleteTime}ms`);

    // Vacuum
    const vacuumStart = Date.now();
    const vacuumStats = await session.vacuum();
    const vacuumTime = Date.now() - vacuumStart;
    console.log(`  - Vacuum ${vacuumStats.totalRemoved} vectors: ${vacuumTime}ms`);

    // Save to S5
    const saveStart = Date.now();
    const cid = await session.saveToS5();
    const saveTime = Date.now() - saveStart;
    console.log(`  - Save to S5: ${saveTime}ms (${(saveTime / 1000).toFixed(1)}s)`);

    // Get final stats
    const stats = await session.getStats();
    console.log(`  - Final state: ${stats.vectorCount} active, ${stats.totalDeletedCount} deleted`);
    console.log(`  ✓ Performance test completed (CID: ${cid})`);

    // Performance assertions
    assert.ok(vacuumTime < 5000, `Vacuum should be <5s, got ${vacuumTime}ms`);
    assert.ok(saveTime < 60000, `S5 save should be <60s, got ${saveTime}ms`);
  });
});
