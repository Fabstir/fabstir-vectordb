/**
 * Manual Vacuum API Test with Real Enhanced S5.js Storage
 *
 * Run this directly: node test/vacuum-real-s5-manual.js
 *
 * Prerequisites:
 * 1. S5 server running: cd test-s5-server && npm start
 * 2. Server on port 5522
 */

const { VectorDbSession } = require('../index.js');

// Valid BIP39 seed phrase (generated by s5.generateSeedPhrase())
const REAL_S5_SEED = 'fault twenty against sodium wear outside tuck lecture report style nothing toward appear also love';

async function runVacuumTests() {
  let session;

  try {
    console.log('═══════════════════════════════════════════════════════');
    console.log('  Vacuum API - Real Enhanced S5.js Integration Test');
    console.log('═══════════════════════════════════════════════════════\n');

    // Create session with REAL S5 storage
    console.log('Creating session with REAL S5 storage...');
    const startCreate = Date.now();
    session = await VectorDbSession.create({
      s5Portal: 'http://localhost:5522',
      userSeedPhrase: REAL_S5_SEED,
      sessionId: `vacuum-real-s5-${Date.now()}`,
      storageMode: 'real', // ← REAL S5 MODE
    });
    console.log(`✓ Session created in ${Date.now() - startCreate}ms\n`);

    // Generate test vectors (50 vectors, 384 dimensions)
    console.log('Generating 50 test vectors...');
    const testVectors = [];
    for (let i = 0; i < 50; i++) {
      const vector = Array(384).fill(0).map(() => Math.random());
      testVectors.push({
        id: `vec-${i}`,
        vector,
        metadata: {
          index: i,
          category: i % 3 === 0 ? 'A' : i % 3 === 1 ? 'B' : 'C',
          active: i % 2 === 0,
        },
      });
    }

    // Add vectors
    console.log('Adding vectors...');
    const startAdd = Date.now();
    await session.addVectors(testVectors);
    console.log(`✓ Added 50 vectors in ${Date.now() - startAdd}ms\n`);

    // Check initial stats
    let stats = await session.getStats();
    console.log('Initial Stats:');
    console.log(`  - Active vectors: ${stats.vectorCount}`);
    console.log(`  - Deleted vectors: ${stats.totalDeletedCount}`);
    console.log(`  - Memory: ${stats.memoryUsageMb.toFixed(2)} MB\n`);

    // Delete 10 vectors
    console.log('Deleting 10 vectors...');
    for (let i = 0; i < 10; i++) {
      await session.deleteVector(`vec-${i}`);
    }
    console.log('✓ Deleted 10 vectors\n');

    // Check stats after deletion
    stats = await session.getStats();
    console.log('After Deletion:');
    console.log(`  - Active vectors: ${stats.vectorCount}`);
    console.log(`  - Deleted vectors: ${stats.totalDeletedCount}`);
    console.log(`  - HNSW deleted: ${stats.hnswDeletedCount}`);
    console.log(`  - IVF deleted: ${stats.ivfDeletedCount}\n`);

    // Vacuum operation
    console.log('Running vacuum operation...');
    const startVacuum = Date.now();
    const vacuumStats = await session.vacuum();
    const vacuumTime = Date.now() - startVacuum;
    console.log(`✓ Vacuum completed in ${vacuumTime}ms`);
    console.log(`  - Total removed: ${vacuumStats.totalRemoved}`);
    console.log(`  - HNSW removed: ${vacuumStats.hnswRemoved}`);
    console.log(`  - IVF removed: ${vacuumStats.ivfRemoved}\n`);

    // Check stats after vacuum
    stats = await session.getStats();
    console.log('After Vacuum:');
    console.log(`  - Active vectors: ${stats.vectorCount}`);
    console.log(`  - Deleted vectors: ${stats.totalDeletedCount}`);
    console.log(`  - Memory: ${stats.memoryUsageMb.toFixed(2)} MB\n`);

    // Save to REAL S5
    console.log('═══════════════════════════════════════════════════════');
    console.log('  Saving to REAL Enhanced S5.js (this may take 10-30s)');
    console.log('═══════════════════════════════════════════════════════\n');
    const startSave = Date.now();
    const cid = await session.saveToS5();
    const saveTime = Date.now() - startSave;
    console.log(`✓ Saved to S5 in ${saveTime}ms (${(saveTime / 1000).toFixed(1)}s)`);
    console.log(`✓ CID: ${cid}\n`);

    // Destroy and reload
    console.log('Testing persistence...');
    await session.destroy();
    console.log('✓ Session destroyed\n');

    // Create new session
    console.log('Creating new session for reload test...');
    session = await VectorDbSession.create({
      s5Portal: 'http://localhost:5522',
      userSeedPhrase: REAL_S5_SEED,
      sessionId: `vacuum-reload-${Date.now()}`,
      storageMode: 'real',
    });
    console.log('✓ New session created\n');

    // Load from REAL S5
    console.log('═══════════════════════════════════════════════════════');
    console.log('  Loading from REAL Enhanced S5.js');
    console.log('═══════════════════════════════════════════════════════\n');
    const startLoad = Date.now();
    await session.loadUserVectors(cid);
    const loadTime = Date.now() - startLoad;
    console.log(`✓ Loaded from S5 in ${loadTime}ms (${(loadTime / 1000).toFixed(1)}s)\n`);

    // Verify persisted state
    stats = await session.getStats();
    console.log('After Reload from Real S5:');
    console.log(`  - Active vectors: ${stats.vectorCount}`);
    console.log(`  - Deleted vectors: ${stats.totalDeletedCount}`);
    console.log(`  - Memory: ${stats.memoryUsageMb.toFixed(2)} MB\n`);

    // Performance summary
    console.log('═══════════════════════════════════════════════════════');
    console.log('  Performance Summary (Real Enhanced S5.js)');
    console.log('═══════════════════════════════════════════════════════\n');
    console.log(`  Vacuum (cleanup):     ${vacuumTime}ms`);
    console.log(`  Save to S5:           ${saveTime}ms (${(saveTime / 1000).toFixed(1)}s)`);
    console.log(`  Load from S5:         ${loadTime}ms (${(loadTime / 1000).toFixed(1)}s)`);
    console.log(`  Total round-trip:     ${saveTime + loadTime}ms (${((saveTime + loadTime) / 1000).toFixed(1)}s)\n`);

    console.log('✅ ALL TESTS PASSED!\n');

  } catch (error) {
    console.error('\n❌ Test failed:');
    console.error(error);
    process.exit(1);
  } finally {
    if (session) {
      await session.destroy();
      console.log('✓ Session cleanup complete');
    }
  }
}

runVacuumTests()
  .then(() => {
    console.log('\n✓ Test suite completed successfully');
    process.exit(0);
  })
  .catch(err => {
    console.error('\n✗ Test suite failed:', err);
    process.exit(1);
  });
